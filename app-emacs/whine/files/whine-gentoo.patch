This patch replaces whine's command redefinitions by a hook function
in post-command-hook, so that the namespace gets no longer cluttered.
Command/complaint pairs are collected in whine-commands-alist, which
is looked up in whine-post-command-hook. - ulm

--- whine.el~	2007-11-19 14:39:13.000000000 +0100
+++ whine.el	2007-11-19 14:50:09.000000000 +0100
@@ -36,36 +36,16 @@
 ;; will not.  It will definitely will degrade system performance.  
 ;; The author takes no responsibility for anything.  
 
- 
-(defun abs (n)
-   (if (< n 0) (- n) n))
 
-
-(defvar unwhine-list nil)
+(defvar whine-commands-alist nil)
 
 (defun whine (key complaints)
   "Rebind KEY so that it utters one of the COMPLAINTS when
 pressed.  unwhinify reverses the process on all keys."
-  (let ((fn (global-key-binding key))
-        whine-fn whine-list)
+  (let ((fn (global-key-binding key)))
     (cond
      ((symbolp fn)
-      (setq whine-list (intern (format "%s-whines"  fn)))
-      (cond
-       (t
-        (not (fboundp whine-list))
-        (setq whine-fn   (intern (format "%s-whiny"  fn)))
-        (setq unwhine-list                ;unwhine-protect
-              (cons (list 'global-set-key key (list 'quote fn))
-                    unwhine-list))
-        (set whine-list complaints)
-        (eval
-         (` (defun (, whine-fn) ()
-              (interactive)
-              (call-interactively  (quote (, fn)))
-              (do-whine (, whine-list)))))))
-      (global-set-key key whine-fn)
-      ))))
+      (add-to-list 'whine-commands-alist (list fn key complaints))))))
 
 (defun whine-say (s)
   (cond
@@ -112,10 +92,7 @@
       (forward-word 1)
       (buffer-substring p (point)))))
 
-(defun whinify ()
-  "Make certain global-mode keys whine.  The command `unwhinify' makes 
-them normal again."
-  (interactive)
+(defun whine-initialize ()
   (let* (
         (noun '("robot" "dweeb" "person" "child" "creep"
                 "sleaze creature" "colorizer" "dentist"
@@ -233,7 +210,7 @@
                   )
                  "What do you mean by `"
                  "How can you say `")
-                 (symbol-function 'whine-get-word)
+                 '(lambda () (whine-get-word))
                  "'"
                  )))
   (whine "\C-p" (append whine-pain
@@ -309,11 +286,37 @@
   (whine "\C-v" whine-pain)
   (whine "\M-v" whine-pain)
   ))
-                
-(whinify)
+
+(defvar whine-last-complaints nil)
+
+(defun whine-post-command-hook ()
+  (let* ((command (assq this-command whine-commands-alist))
+         (complaints
+          (and (or (not (eq (car command) 'self-insert-command))
+                   (equal (nth 1 command) (this-command-keys)))
+               (nth 2 command))))
+    (cond
+     ((> (minibuffer-depth) 0)
+      ;; Save message for later display if we are in the minibuffer.
+      ;; NB: M-x calls post-command-hook _before_ the function name is read.
+      (or whine-last-complaints
+          (setq whine-last-complaints complaints)))
+     (complaints
+      (do-whine complaints)
+      (setq whine-last-complaints nil))
+     (whine-last-complaints
+      (do-whine whine-last-complaints)
+      (setq whine-last-complaints nil)))))
+
+(defun whinify ()
+  "Make certain global-mode keys whine.
+The command `unwhinify' makes them normal again."
+  (interactive)
+  (or whine-commands-alist
+      (whine-initialize))
+  (add-hook 'post-command-hook 'whine-post-command-hook))
 
 (defun unwhinify ()
   "Hopefully, remove the whine-bindings on the whiny keys."
   (interactive)
-  (mapcar (function eval) unwhine-list)
-  (setq unwhine-list nil))
+  (remove-hook 'post-command-hook 'whine-post-command-hook))
